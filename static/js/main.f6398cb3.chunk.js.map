{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","width","height","src","_ref3","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiCeA,MA3Bf,SAAAC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,SACnC,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEtCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVL,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAkBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAEjER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACTH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACIW,KAAMb,EACNc,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBAchC,SAASZ,EAATa,GAAoC,IAAdpB,EAAcoB,EAAdpB,OAAQQ,EAAMY,EAANZ,IAC1B,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBE,IAAKA,EAAKT,MAAOS,EAAKa,MAAM,MAAMC,OAAO,MAAMC,IAAKvB,IAI3F,SAASY,EAATY,GAA6B,IAARd,EAAQc,EAARd,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,EAAhC,YC1Cae,6MAUnBC,MAAQ,KAURC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOpB,IAAI,SAACqB,GAEpC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACLlC,MAAO+B,EAAMI,cACblC,OAAQ8B,EAAMK,mBACdlC,OAAQ6B,EAAM7B,OACdC,SAAU4B,EAAM5B,SAChBW,IAAKiB,EAAMM,UAMjBC,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGUf,EAAKgB,WAHf,OAGLf,EAHKY,EAAAI,KAOXjB,EAAKkB,SAAS,CACZjB,WARS,wBAAAY,EAAAM,SAAAT,QAYbM,SAAW,WAIT,OAAOI,MAAM,iEAEZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFAvC1BC,KAAKlB,8CAgDLN,QAAQC,IAAI,cADL,IAKCH,EAAW0B,KAAK7B,MAAhBG,OACR,OAEE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAS,MAAQ,gBAC9B0B,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBAxEnB6B,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.f6398cb3.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\nimport React from 'react'; // Component 사용하지 않으므로!\r\nimport PropTypes from \"prop-types\";\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        // className : 정상적인 css에서 class를 뜻함. JSX에서는 class가 아닌 className을 써야함\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genre\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                        />\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Movie;\r\n\r\n// don't have state\r\n// render x lifecycle x\r\n// only have return\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img className=\"Movie__Poster\" alt={alt} title={alt} width=\"300\" height=\"400\" src={poster} />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}&nbsp;</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired, // array!!\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\n\nexport default class App extends Component {\n\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() : 컴포넌트가 새로운 props를 받음 -> shouldComponentUpdate() : 리액트는 old props, new props르 살펴본 다음 서로가 다르면 업데이트 = true라고 생각함 그러면 업데이트!  -> componentWillUpdate() : 이곳에 뱅글뱅글 돌아가는 spinner를 붙일 수 있겠다! -> render() -> componentDidUpdate : 로딩 중 메시지나 아이콘 숨기기!\n\n  // componentWillMount() { // 1\n  //   console.log('will mount');\n  //   // API에 작업 요청\n  // }\n\n  state = {\n    \n\n  }\n\n  componentDidMount() { // 3\n    this._getMovies(); \n  }\n\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        genres={movie.genres} \n        synopsis={movie.synopsis}\n        key={movie.id} />\n      // key는 map의 index를 사용하지 않는 것이 좋음. 느리기 때문.\n    })\n    return movies\n  }\n\n  _getMovies = async () => { // async를 안쓰면 await이 동작하지 x\n    // 이 함수는 비동기 함수이고 movies라는 variable을 갖고 있어\n    // 그리고 이건 value를 갖고 있어. await 모드인 _callApi 함수를!\n    const movies = await this._callApi(); \n    // await : callApi가 끝나기를 기다림. 성공적으로 수행하는 것을 기다리는 것이 아니라!\n    // callApi의 return value가 무엇이든 그냥 그 value를 movies에 넣을거야\n\n    this.setState({ // 그러나 이 라인은 callApi 작업이 완료되기까지 수행 안해 이 작업이 실패로 끝나더라도!\n      movies // this is modern javascript. 그냥 이렇게 쓰면 state에서 정의 안해도 되나봐\n    })\n  }\n\n  _callApi = () => {\n\n    // This is Asynchronous\n    // fetch는 url을 에이작스로 불러올 수 있다!\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    // then function은 1개의 attribute만 줘 그것은 object. fetch의 결과물\n    .then(response => response.json()) // 성공적 수행이 아니라 그냥 작업이 끝나면\n    // return json.data.movies 안해도 => 가 그 역할(return) 한다 : arrow fucntion\n    .then(json => json.data.movies) // json으로 변환하기\n    .catch(err => console.log(err)) // 혹시 에러가 나면 보여줘\n    \n    // old javascript\n    // .catch(function(err) {\n    //   console.log(err)\n    // })\n  }\n\n  render() { // 2\n    console.log('did render');\n    // console.log('dd');\n    // console.log(this.state.movies);\n\n    const { movies } = this.state;\n    return (\n      // 영화가 state에 없으면 loading 띄우기\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'loading' }  \n        \n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}